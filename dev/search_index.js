var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Cluster","category":"page"},{"location":"#Cluster.jl","page":"Home","title":"Cluster.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Cluster.jl. This is a package for clustering algorithms in Julia. It was created by a group of students as part of a project for the course \"Julia for Machine Learning\" at TU Berlin.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[!WARNING] ***Please instead use the Clustering.jl package for a more complete and maintained package.***","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Cluster]","category":"page"},{"location":"#Cluster.KMeans","page":"Home","title":"Cluster.KMeans","text":"mutable struct KMeans\n\nA structure representing a KMeans clustering model.\n\nFields\n\nk::Int: The number of clusters.\nmode::Symbol: The mode of initialization (:kmeans or :kmeans++).\nmax_try::Int: The maximum number of iterations for the algorithm.\ntol::Float64: The tolerance for convergence.\ncentroids::Array{Float64,2}: The centroids of the clusters.\nlabels::Array{Int,1}: The labels assigned to each data point.\n\n\n\n\n\n","category":"type"},{"location":"#Cluster.KMeans-Tuple{}","page":"Home","title":"Cluster.KMeans","text":"KMeans(; k::Int=3, mode::Symbol=:kmeans, max_try::Int=100, tol::Float64=1e-4) -> KMeans\n\nCreates a new KMeans clustering model.\n\nKeyword Arguments\n\nk::Int: The number of clusters (default: 3).\nmode::Symbol: The mode of initialization (:kmeans or :kmeans++, default: :kmeans).\nmax_try::Int: The maximum number of iterations for the algorithm (default: 100).\ntol::Float64: The tolerance for convergence (default: 1e-4).\n\nReturns\n\nA KMeans model with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"#Cluster.assign_center-Tuple{Any}","page":"Home","title":"Cluster.assign_center","text":"assign_center(D) -> Array\n\nReturns the index of the nearest centroid for each data point.\n\nArguments\n\nD: The distance matrix.\n\nReturns\n\nAn array of indices indicating the nearest centroid for each data point.\n\nExamples\n\nD = [\n    0.0 2.0;\n    1.0 1.0;\n    2.0 0.0\n]\nlabels = assign_center(D)\n\n\n\n\n\n","category":"method"},{"location":"#Cluster.compute_distance-Tuple{Any, Any}","page":"Home","title":"Cluster.compute_distance","text":"compute_distance(data, centroids) -> Array\n\nComputes the distance from each data point to each centroid.\n\nArguments\n\ndata: The input data matrix where each row is a data point.\ncentroids: The current centroids.\n\nReturns\n\nA distance matrix D of size (number of data points, number of centroids), where D[i, j] is the distance from data point i to centroid j.\n\nExamples\n\nX = [\n    1.0 1.0;\n    1.5 2.0;\n    3.0 4.0\n]\ncentroids = [\n    1.0 1.0;\n    3.0 4.0\n]\nD = compute_distance(X, centroids)\n\n\n\n\n\n","category":"method"},{"location":"#Cluster.fit!-Tuple{Cluster.KMeans, Any}","page":"Home","title":"Cluster.fit!","text":"fit!(model::KMeans, X)\n\nRuns the KMeans algorithm for the given data and model.\n\nArguments\n\nmodel::KMeans: The KMeans model to be trained.\nX: The input data matrix where each row is a data point.\n\nExamples\n\nmodel = KMeans(k=3, mode=:kmeans)\nX = [\n    1.0 1.0;\n    1.5 2.0;\n    3.0 4.0;\n    5.0 6.0;\n    8.0 9.0;\n    10.0 11.0\n]\nfit!(model, X)\n\n\n\n\n\n","category":"method"},{"location":"#Cluster.init_centroids-Tuple{Any, Any, Any}","page":"Home","title":"Cluster.init_centroids","text":"init_centroids(X::Array{Float64,2}, K::Int, mode::Symbol) -> Array{Float64,2}\n\nInitialize centroids for the chosen algorithm.\n\nArguments\n\nX::Array{Float64,2}: The input data matrix where each row is a data point.\nK::Int: The number of clusters.\nmode::Symbol: The mode of initialization (:kmeans or :kmeans++).\n\nReturns\n\nAn array of centroids initialized based on the chosen mode.\n\nExamples\n\nX = [\n    1.0 1.0;\n    1.5 2.0;\n    3.0 4.0;\n    5.0 6.0;\n    8.0 9.0;\n    10.0 11.0\n]\nK = 2\nmode = :kmeans\ncentroids = init_centroids(X, K, mode)\n\n\n\n\n\n","category":"method"},{"location":"#Cluster.predict-Tuple{Cluster.KMeans, Any}","page":"Home","title":"Cluster.predict","text":"predict(model,data) -> Array\n\nReturns the cluster labels for the given data points.\n\nArguments\n\nmodel::KMeans: The trained KMeans model.\nX::Array{Float64,2}: The input data matrix where each row is a data point.\n\nReturns\n\nAn array of cluster labels for each data point.\n\nExamples\n\ndata = [\n    # Cluster 1\n    1.0 1.0 1.5;\n    1.5 2.0 1.6;\n    1.3 1.8 1.4;\n    # Cluster 2\n    5.0 7.0 3.5;\n    5.5 7.5 3.5;\n    6.0 7.0 3.5;\n    # Cluster 3\n    8.0 1.0 6.5;\n    8.5 1.5 6.5;\n    8.3 1.2 7.5;\n]\ntest_data = [1.1 1.1 1.2]\nmodel = KMeans(k=3)\nfit!(model, data)\nlabels = predict(model, test_data)\n\n\n\n\n\n","category":"method"},{"location":"#Cluster.update_centroids-Tuple{Any, Any, Any}","page":"Home","title":"Cluster.update_centroids","text":"update_centroids(data, labelvector, model) -> Array\n\nCalculates new centroids based on the given data and label vector.\n\nArguments\n\ndata: The input data matrix where each row is a data point.\nlabelvector: The current labels of the data points.\nmodel: The KMeans model.\n\nReturns\n\nAn array of new centroids.\n\nExamples\n\nX = [\n    1.0 1.0;\n    1.5 2.0;\n    3.0 4.0;\n    5.0 6.0\n]\nlabels = [1, 1, 2, 2]\nmodel = KMeans(k=2)\nnew_centroids = update_centroids(X, labels, model)\n\n\n\n\n\n","category":"method"}]
}
